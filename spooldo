#!/usr/bin/python3

# Copyright (c) 2023 by DomainTools LLC
# Copyright (c) 2012, 2015, 2017-2018 by Farsight Security, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import random
import shutil
import string
import sys
import time

class CommandTemplate(string.Template):
    delimiter = '%'

def same_filesystem(fname1, fname2):
    if os.stat(fname1).st_dev == os.stat(fname2).st_dev:
        return True
    return False

def dirwalk(dirname):
    file_list = []
    for root, dirs, files in os.walk(dirname):
        for fname in files:
            if fname.startswith('.'):
                continue
            fname = os.path.join(root, fname)
            file_list.append(fname)
    if os.getenv('SPOOLDO_ORDERED'):
        file_list.sort()
    else:
        random.shuffle(file_list)
    return file_list

class Spooldo:
    def __init__(self, incoming_dname, active_dname, *archive_dnames):
        self.incoming_dname = incoming_dname
        self.active_dname = active_dname
        self.archive_dnames = archive_dnames

        self.active_files = set()
        self.active_files_by_pid = dict()

        cmd_tmpl = os.getenv("SPOOLDO_COMMAND_TEMPLATE")
        if cmd_tmpl:
            self.cmd_tmpl = CommandTemplate(cmd_tmpl)
        else:
            self.cmd_tmpl = None

        self.max_jobs = 1
        try:
            jobs = int(os.getenv("SPOOLDO_JOBS"))
            if jobs >= 1:
                self.max_jobs = jobs
        except:
            pass

    def run_cmd(self, active_fname):
        cmd = self.cmd_tmpl.substitute(fname=active_fname)
        sys.stderr.write(cmd + '\n')
        rc = os.system(cmd)
        if rc != 0:
            try:
                os.unlink(active_fname)
            finally:
                error('command failed')

    def archive_incoming(self, incoming_fname, fname):
        for archive_dname in self.archive_dnames:
            archive_fname = os.path.join(archive_dname, fname)
            try:
                if same_filesystem(self.incoming_dname, archive_dname):
                    os.link(incoming_fname, archive_fname)
                else:
                    shutil.copy(incoming_fname, archive_fname)
            except Exception as e:
                warn("Failed to create %s: %s" % (archive_fname, str(e)))
        os.unlink(incoming_fname)

    def start_job(self, incoming_fname, active_fname):
        pid = os.fork()
        if pid == 0:
            try:
                self.run_cmd(active_fname)
                fname = os.path.relpath(active_fname, self.active_dname)
                self.archive_incoming(incoming_fname, fname)
            except:
                sys.exit(1)
            sys.exit(0)
        elif pid < 0:
            error("os.fork() failed")
        else:
            self.active_files.add(active_fname)
            self.active_files_by_pid[pid] = active_fname

    def njobs(self):
        return len(self.active_files_by_pid)

    def wait(self, block=True):
        flags = os.WNOHANG
        if block:
            flags = 0
        (pid, status) = os.waitpid(-1, flags)
        if pid in self.active_files_by_pid:
            active_fname = self.active_files_by_pid[pid]
            self.active_files.remove(active_fname)
            del self.active_files_by_pid[pid]
        return pid > 0

    def do_spool(self):
        for incoming_fname in dirwalk(self.incoming_dname):
            if os.path.getsize(incoming_fname) == 0:
                os.unlink(incoming_fname)
                continue

            rel_fname = os.path.relpath(incoming_fname, self.incoming_dname)
            fname = rel_fname.replace(os.path.sep, '--')
            active_fname = os.path.join(self.active_dname, fname)

            if active_fname in self.active_files:
                continue

            try:
                os.link(incoming_fname, active_fname)
            except Exception as e:
                warn('unable to link %s to %s: %s' % (incoming_fname, active_fname, str(e)))
                continue

            if self.cmd_tmpl:
                if self.max_jobs == 1:
                    self.run_cmd(active_fname)
                    self.archive_incoming(incoming_fname, fname)
                else:
                    self.start_job(incoming_fname, active_fname)
                    if self.njobs() == self.max_jobs:
                        self.wait(block=True)

            else:
                self.archive_incoming(incoming_fname, fname)

        while self.njobs() > 0 and self.wait(block=False):
            pass

def warn(msg):
    sys.stderr.write('spooldo: warning: %s\n' % msg)

def error(msg):
    sys.stderr.write('spooldo: error: %s\n' % msg)
    sys.exit(1)

def main(incoming_dname, active_dname, archive_dnames=[]):
    incoming_dname = os.path.realpath(incoming_dname)
    active_dname = os.path.realpath(active_dname)

    if not os.path.isdir(incoming_dname):
        error('"%s" is not a directory.' % incoming_dname)
    if not os.path.isdir(active_dname):
        error('"%s" is not a directory.' % active_dname)

    if not same_filesystem(incoming_dname, active_dname):
        error('incoming directory and active directory are not on the same filesystem.')

    if archive_dnames:
        for archive_dname in archive_dnames:
            archive_dname = os.path.realpath(archive_dname)

            if not os.path.isdir(archive_dname):
                error('"%s" is not a directory.' % archive_dname)

            if os.path.samefile(incoming_dname, archive_dname):
                error('incoming directory and archive directory are the same.')
            if os.path.samefile(active_dname, archive_dname):
                error('active directory and archive directory are the same.')

    if os.path.samefile(incoming_dname, active_dname):
        error('incoming directory and active directory are the same.')

    spooldo = Spooldo(incoming_dname, active_dname, *archive_dnames)

    while True:
        try:
            spooldo.do_spool()
        except Exception:
            pass
        except SystemExit:
            raise
        time.sleep(1)

if __name__ == '__main__':
    if len(sys.argv) == 3:
        main(sys.argv[1], sys.argv[2])
    elif len(sys.argv) > 3:
        main(sys.argv[1], sys.argv[2], sys.argv[3:])
    else:
        sys.stderr.write('Usage: %s <INCOMING DIR> <ACTIVE DIR> [<ARCHIVE DIR> ... <ARCHIVE DIR>]\n' % sys.argv[0])
        sys.exit(1)
