#!/usr/bin/env python

# Copyright (c) 2012 by Internet Systems Consortium, Inc. ("ISC")
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
# OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import os
import random
import shutil
import string
import sys
import time

class CommandTemplate(string.Template):
    delimiter = '%'

def run_cmd(cmd):
    sys.stderr.write(cmd + '\n')
    return os.system(cmd)

def dirwalk(dirname):
    file_list = []
    for root, dirs, files in os.walk(dirname):
        for fname in files:
            if fname.startswith('.'):
                continue
            fname = os.path.join(root, fname)
            file_list.append(fname)
    if os.getenv('SPOOLDO_ORDERED'):
        file_list.sort()
    else:
        random.shuffle(file_list)
    return file_list

def same_filesystem(fname1, fname2):
    if os.stat(fname1).st_dev == os.stat(fname2).st_dev:
        return True
    return False

def do_spool(incoming_dname, active_dname, archive_dname=None, cmd_tmpl=None):
    for incoming_fname in dirwalk(incoming_dname):
        rel_fname = os.path.relpath(incoming_fname, incoming_dname)
        fname = rel_fname.replace(os.path.sep, '--')
        active_fname = os.path.join(active_dname, fname)

        if archive_dname:
            archive_fname = os.path.join(archive_dname, fname)
            if same_filesystem(incoming_dname, archive_dname):
                os.link(incoming_fname, archive_fname)
            else:
                shutil.copy(incoming_fname, archive_fname)

        try:
            os.link(incoming_fname, active_fname)
        except:
            warn('unable to link %s to %s' % (incoming_fname, active_fname))

        if cmd_tmpl:
            rc = run_cmd(CommandTemplate(cmd_tmpl).substitute(fname=active_fname))
            if rc != 0:
                os.unlink(active_fname)
                error('command failed')

        os.unlink(incoming_fname)

def warn(msg):
    sys.stderr.write('spooldo: warning: %s\n' % msg)

def error(msg):
    sys.stderr.write('spooldo: error: %s\n' % msg)
    sys.exit(1)

def main(incoming_dname, active_dname, archive_dname=None):
    incoming_dname = os.path.realpath(incoming_dname)
    active_dname = os.path.realpath(active_dname)

    if not os.path.isdir(incoming_dname):
        error('"%s" is not a directory.')
        sys.exit(1)
    if not os.path.isdir(active_dname):
        error('"%s" is not a directory.')

    if not same_filesystem(incoming_dname, active_dname):
        error('incoming directory and active directory are not on the same filesystem.')

    if archive_dname:
        archive_dname = os.path.realpath(archive_dname)

        if not os.path.isdir(archive_dname):
            error('"%s" is not a directory.')

        if os.path.samefile(incoming_dname, archive_dname):
            error('incoming directory and archive directory are the same.')
        if os.path.samefile(active_dname, archive_dname):
            error('active directory and archive directory are the same.')

    if os.path.samefile(incoming_dname, active_dname):
        error('incoming directory and active directory are the same.')

    cmd_tmpl = os.getenv('SPOOLDO_COMMAND_TEMPLATE')

    while True:
        try:
            do_spool(incoming_dname, active_dname, archive_dname, cmd_tmpl)
        except:
            pass
        time.sleep(1)

if __name__ == '__main__':
    if len(sys.argv) == 3:
        main(sys.argv[1], sys.argv[2])
    elif len(sys.argv) == 4:
        main(sys.argv[1], sys.argv[2], sys.argv[3])
    else:
        sys.stderr.write('Usage: %s <INCOMING DIR> <ACTIVE DIR> [<ARCHIVE DIR>]\n' % sys.argv[0])
        sys.exit(1)
